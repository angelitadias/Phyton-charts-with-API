# -*- coding: utf-8 -*-
"""Gráficos com dados extraídos do Excel

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jXkMiGF4X4n57kj8LwAKQ-ZY1lL16pfR
"""

# 1- Importar as bibliotecas necessárias
import pandas as pd
import matplotlib.pyplot as plt

# 2- Carregar a base de dados
excel_file_patch = 'estimativa_dou_2021.xlsx'

# 3- Iniciar a manipulação dos dados
df = pd.read_excel(excel_file_patch)

# 4- Visualização das primeiras linhas para uma análise inicial
print(df)

# 5- Examinar colunas presentes para identificar as informações disponíveis
df.info()

# 6- Filtrar os dados do estado
base = df[df['UF'] == 'AP']

# 7- Converter para números inteiros
base['POPULAÇÃO ESTIMADA'] = base['POPULAÇÃO ESTIMADA'].astype(int)

# 8- Eliminar os valores nulos (NaN)
base = base.dropna(subset=['POPULAÇÃO ESTIMADA'])

# 9- Ordenar o DataFrame com base na coluna 'POPULAÇÃO ESTIMADA' para classificar os municípios por população.
df['POPULAÇÃO ESTIMADA'] = pd.to_numeric(df['POPULAÇÃO ESTIMADA'], errors='coerce')

# 10- Imprimir o DataFrame ordenado para análise e uso posterior.
print(base)

# 11- Gráfico do top 10 Municípios Mais Populosos


#11.1- colocar os dados em ordem crescente
base = base.sort_values(by= 'POPULAÇÃO ESTIMADA', ascending=False)
df_ap = base.head(10)
df_ap = df_ap.sort_values(by= 'POPULAÇÃO ESTIMADA', ascending=True)

#11.2- tamanho da figura
plt.figure(figsize=(10,5))

#11.3- delimitar o tamanho das barras
bar_width=0.9

#11.4- delimitar a posição das barras
bar_positions_ap= range(len(df_ap))

#11.5- adicionar o título
plt.title('Top 10 Municípios em População Estimada (Amapá)')

#11.6- remover barras
plt.gca().spines['right'].set_visible(False)
plt.gca().spines['top'].set_visible(False)
plt.gca().spines['left'].set_visible(False)
plt.gca().spines['bottom'].set_visible(False)

#11.7- delimitar os eixos e decorações
eixoY = ['Macapá', 'Santana', 'Laranjal do Jari', 'Oiapoque', 'Mazagão', 'Porto Grande', 'Tartarugalzinho', 'Pedra Branca do Amapari', 'Vitória do Jari', 'Calçoene']
plt.yticks([9,8,7,6,5,4,3,2,1,0.005], eixoY)
plt.xlabel ('População Estimada')
plt.barh(bar_positions_ap, df_ap['POPULAÇÃO ESTIMADA'], height=bar_width, color='pink', label='População Estimada')
for index, value in zip(bar_positions_ap, df_ap['POPULAÇÃO ESTIMADA']):
    plt.text(value, index, f'{int(value):,}', va='center', color= 'black')
plt.gca().spines['top'].set_visible(False)

#11.8- exibir o gráfico
plt.tight_layout()
plt.show()

# 12- Gráfico dos 10 municípios menos populosos



#12.1- Mudança da exibição (Mais populosos para menos populosos)
base = base.sort_values(by= 'POPULAÇÃO ESTIMADA', ascending=True)
plt.figure(figsize=(10,5))
df_ap = base.head(10)
bar_width=0.9
bar_positions_ap= range(len(df_ap))
plt.title('Top 10 Municípios Menos Populosos (Amapá)')
plt.gca().spines['right'].set_visible(False)
plt.gca().spines['top'].set_visible(False)
plt.gca().spines['left'].set_visible(False)
plt.gca().spines['bottom'].set_visible(False)
eixoY = ['Tartarugalzinho', 'Pedra Branca do Amapari', 'Vitória do Jari', 'Calçoene','Amapá','Ferreira Gomes','Itaubal','Serra do Navio','Cutias','Pracuúba']
plt.yticks([9,8,7,6,5,4,3,2,1,0.005], eixoY)
plt.xlabel('POPULAÇÃO ESTIMADA')
plt.barh(bar_positions_ap, df_ap['POPULAÇÃO ESTIMADA'], height=bar_width, color='lightblue', label='População Estimada')
for index, value in zip(bar_positions_ap, df_ap['POPULAÇÃO ESTIMADA']):
    plt.text(value, index, f'{int(value):,}', va='center', color= 'black')
plt.gca().spines['top'].set_visible(False)
plt.tight_layout()
plt.show()

# 13- Gráficos lado a lado


#13.1- Tamanho da figura
plt.figure(figsize=(13, 4))

#13.2- Primeiro subplot (Gráfico 01)
plt.subplot(1, 2, 1)
bar_positions_ap = range(len(df_ap))
base = base.sort_values(by= 'POPULAÇÃO ESTIMADA', ascending=False)
df_ap = base.head(10)
df_ap = df_ap.sort_values(by='POPULAÇÃO ESTIMADA', ascending=True)
plt.xlabel('População Estimada')
plt.barh(bar_positions_ap, df_ap['POPULAÇÃO ESTIMADA'], height=0.9, color='pink', label='População Estimada')
plt.gca().spines['right'].set_visible(False)
plt.gca().spines['top'].set_visible(False)
plt.gca().spines['left'].set_visible(False)
plt.gca().spines['bottom'].set_visible(False)
eixoY = ['Macapá', 'Santana', 'Laranjal do Jari', 'Oiapoque', 'Mazagão', 'Porto Grande', 'Tartarugalzinho', 'Pedra Branca do Amapari', 'Vitória do Jari', 'Calçoene']
plt.yticks([9,8,7,6,5,4,3,2,1,0.05], eixoY)
plt.xlabel('População Estimada')
for index, value in zip(bar_positions_ap, df_ap['POPULAÇÃO ESTIMADA']):
    plt.text(value, index, f'{int(value):,}', va='center', color='black')
plt.title('Top 10 Municípios em População Estimada (Amapá)')


# 13.3- Segundo subplot (Gráfico 02)
plt.subplot(1, 2, 2)
base = base.sort_values(by= 'POPULAÇÃO ESTIMADA', ascending=True)
df_ap = base.head(10)
df_ap = df_ap.sort_values(by='POPULAÇÃO ESTIMADA', ascending=True)
bar_positions_ap = range(len(df_ap))
plt.barh(bar_positions_ap, df_ap['POPULAÇÃO ESTIMADA'], height=0.9, color='lightblue', label='População Estimada')
plt.gca().spines['right'].set_visible(False)
plt.gca().spines['top'].set_visible(False)
plt.gca().spines['left'].set_visible(False)
plt.gca().spines['bottom'].set_visible(False)
segundo_eixoY = ['Tartarugalzinho', 'Pedra Branca do Amapari', 'Vitória do Jari', 'Calçoene','Amapá','Ferreira Gomes','Itaubal','Serra do Navio','Cutias','Pracuúba']
plt.xlabel('População Estimada')
plt.yticks([9,8,7,6,5,4,3,2,1,0.05], segundo_eixoY)
for index, value in zip(bar_positions_ap, df_ap['POPULAÇÃO ESTIMADA']):
    plt.text(value, index, f'{int(value):,}', va='center', color='black')
plt.title('Top 10 Municípios Menos Populosos (Amapá)')
plt.gca().spines['top'].set_visible(False)
plt.gca().spines['right'].set_visible(False)

# Exibir os subplots (Gráficos)
plt.tight_layout()
plt.show()

# 14- Gráfico de comparação(Amapá e Amazonas)


#14.1- Importar as bibliotecas novamente (Para adicionar a bliblioteca numpy)
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

#14.2- Importar os dados do Amapá
excel_file_path = "estimativa_dou_2021.xlsx"
df_ap = pd.read_excel(excel_file_path)
df_ap = df_ap[(df_ap['UF'] == 'AP') & (df_ap['POPULAÇÃO ESTIMADA'].notna())]
df_ap['POPULAÇÃO ESTIMADA'] = pd.to_numeric(df_ap['POPULAÇÃO ESTIMADA'], errors='coerce')
df_ap = df_ap.dropna(subset=['POPULAÇÃO ESTIMADA'])
df_selecap = df_ap.sort_values(by='POPULAÇÃO ESTIMADA', ascending=False).head(10)

#14.3- Importar os dados do Amazonas
excel_file_path2 = "estimativa_dou_2021.xlsx"
df_am = pd.read_excel(excel_file_path2)
df_am = df_am[(df_am['UF'] == 'AM') & (df_am['POPULAÇÃO ESTIMADA'].notna())]
df_am['POPULAÇÃO ESTIMADA'] = pd.to_numeric(df_am['POPULAÇÃO ESTIMADA'], errors='coerce')
df_am = df_am.dropna(subset=['POPULAÇÃO ESTIMADA'])
df_selecam = df_am.sort_values(by='POPULAÇÃO ESTIMADA', ascending=False).head(10)

#14.4- Construir o gráfico
fig, ax = plt.subplots(figsize=(14, 9))
cooap = np.arange(len(df_selecap))
width1 = 0.4
bars1 = ax.barh(cooap - width1/2, df_selecap['POPULAÇÃO ESTIMADA'], height=width1, color='pink', label='Amapá')
cooam = np.arange(len(df_selecam))
width2 = 0.4
bars2 = ax.barh(cooam + width2 /2, df_selecam['POPULAÇÃO ESTIMADA'], height=width2, color='lightblue', label='Amazonas')
ax.yaxis.set_label_coords(-0.15, 0.5)
ax.set_xlabel('População Estimada')
ax.set_title('Comparação Top 10 Municípios Mais Populosos - Amapá e Amazonas')
ax.set_yticklabels([])
ax.invert_yaxis()
ax.legend()

#14.5- Adicionar os rótulos
for i, (bar1, value1) in enumerate(zip(bars1, df_selecap['POPULAÇÃO ESTIMADA'])):
    ax.text(value1, bar1.get_y() + bar1.get_height() / 2, f'{int(value1)}', ha='left', va='center', fontsize=9, color='black')
    ax.text(-5, bar1.get_y() + bar1.get_height() / 2, df_selecap.iloc[i]['NOME DO MUNICÍPIO'], ha='right', va='center', fontsize=9, color='black')
for i, (bar2, value2) in enumerate(zip(bars2, df_selecam['POPULAÇÃO ESTIMADA'])):
    ax.text(value2, bar2.get_y() + bar2.get_height() / 2, f'{int(value2)}', ha='left', va='center', fontsize=9, color='black')
    ax.text(-5, bar2.get_y() + bar2.get_height() / 2, df_selecam.iloc[i]['NOME DO MUNICÍPIO'], ha='right', va='center', fontsize=9, color='black')
plt.subplots_adjust(wspace=0.5)
for ax in [ax]:
    ax.spines['right'].set_visible(False)
    ax.spines['top'].set_visible(False)
    ax.spines['left'].set_visible(False)
    ax.spines['bottom'].set_visible(False)
plt.show()